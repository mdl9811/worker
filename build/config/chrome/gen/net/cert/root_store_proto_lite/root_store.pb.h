// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: root_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_root_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_root_5fstore_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_root_store {
class ConstraintSet;
struct ConstraintSetDefaultTypeInternal;
extern ConstraintSetDefaultTypeInternal _ConstraintSet_default_instance_;
class RootStore;
struct RootStoreDefaultTypeInternal;
extern RootStoreDefaultTypeInternal _RootStore_default_instance_;
class TrustAnchor;
struct TrustAnchorDefaultTypeInternal;
extern TrustAnchorDefaultTypeInternal _TrustAnchor_default_instance_;
}  // namespace chrome_root_store
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_root_store::ConstraintSet* Arena::CreateMaybeMessage<::chrome_root_store::ConstraintSet>(Arena*);
template<> ::chrome_root_store::RootStore* Arena::CreateMaybeMessage<::chrome_root_store::RootStore>(Arena*);
template<> ::chrome_root_store::TrustAnchor* Arena::CreateMaybeMessage<::chrome_root_store::TrustAnchor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_root_store {

// ===================================================================

class ConstraintSet final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_root_store.ConstraintSet) */ {
 public:
  inline ConstraintSet() : ConstraintSet(nullptr) {}
  ~ConstraintSet() override;
  explicit PROTOBUF_CONSTEXPR ConstraintSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstraintSet(const ConstraintSet& from);
  ConstraintSet(ConstraintSet&& from) noexcept
    : ConstraintSet() {
    *this = ::std::move(from);
  }

  inline ConstraintSet& operator=(const ConstraintSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintSet& operator=(ConstraintSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConstraintSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstraintSet* internal_default_instance() {
    return reinterpret_cast<const ConstraintSet*>(
               &_ConstraintSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConstraintSet& a, ConstraintSet& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ConstraintSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstraintSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstraintSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstraintSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConstraintSet& from);
  void MergeFrom(const ConstraintSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConstraintSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_root_store.ConstraintSet";
  }
  protected:
  explicit ConstraintSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermittedDnsNamesFieldNumber = 5,
    kMinVersionFieldNumber = 3,
    kMaxVersionExclusiveFieldNumber = 4,
    kSctNotAfterSecFieldNumber = 1,
    kSctAllAfterSecFieldNumber = 2,
  };
  // repeated string permitted_dns_names = 5;
  int permitted_dns_names_size() const;
  private:
  int _internal_permitted_dns_names_size() const;
  public:
  void clear_permitted_dns_names();
  const std::string& permitted_dns_names(int index) const;
  std::string* mutable_permitted_dns_names(int index);
  void set_permitted_dns_names(int index, const std::string& value);
  void set_permitted_dns_names(int index, std::string&& value);
  void set_permitted_dns_names(int index, const char* value);
  void set_permitted_dns_names(int index, const char* value, size_t size);
  std::string* add_permitted_dns_names();
  void add_permitted_dns_names(const std::string& value);
  void add_permitted_dns_names(std::string&& value);
  void add_permitted_dns_names(const char* value);
  void add_permitted_dns_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& permitted_dns_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_permitted_dns_names();
  private:
  const std::string& _internal_permitted_dns_names(int index) const;
  std::string* _internal_add_permitted_dns_names();
  public:

  // optional string min_version = 3;
  bool has_min_version() const;
  private:
  bool _internal_has_min_version() const;
  public:
  void clear_min_version();
  const std::string& min_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_version();
  PROTOBUF_NODISCARD std::string* release_min_version();
  void set_allocated_min_version(std::string* min_version);
  private:
  const std::string& _internal_min_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_version(const std::string& value);
  std::string* _internal_mutable_min_version();
  public:

  // optional string max_version_exclusive = 4;
  bool has_max_version_exclusive() const;
  private:
  bool _internal_has_max_version_exclusive() const;
  public:
  void clear_max_version_exclusive();
  const std::string& max_version_exclusive() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_version_exclusive(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_version_exclusive();
  PROTOBUF_NODISCARD std::string* release_max_version_exclusive();
  void set_allocated_max_version_exclusive(std::string* max_version_exclusive);
  private:
  const std::string& _internal_max_version_exclusive() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_version_exclusive(const std::string& value);
  std::string* _internal_mutable_max_version_exclusive();
  public:

  // optional int64 sct_not_after_sec = 1;
  bool has_sct_not_after_sec() const;
  private:
  bool _internal_has_sct_not_after_sec() const;
  public:
  void clear_sct_not_after_sec();
  int64_t sct_not_after_sec() const;
  void set_sct_not_after_sec(int64_t value);
  private:
  int64_t _internal_sct_not_after_sec() const;
  void _internal_set_sct_not_after_sec(int64_t value);
  public:

  // optional int64 sct_all_after_sec = 2;
  bool has_sct_all_after_sec() const;
  private:
  bool _internal_has_sct_all_after_sec() const;
  public:
  void clear_sct_all_after_sec();
  int64_t sct_all_after_sec() const;
  void set_sct_all_after_sec(int64_t value);
  private:
  int64_t _internal_sct_all_after_sec() const;
  void _internal_set_sct_all_after_sec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_root_store.ConstraintSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> permitted_dns_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_version_exclusive_;
    int64_t sct_not_after_sec_;
    int64_t sct_all_after_sec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_root_5fstore_2eproto;
};
// -------------------------------------------------------------------

class TrustAnchor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_root_store.TrustAnchor) */ {
 public:
  inline TrustAnchor() : TrustAnchor(nullptr) {}
  ~TrustAnchor() override;
  explicit PROTOBUF_CONSTEXPR TrustAnchor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustAnchor(const TrustAnchor& from);
  TrustAnchor(TrustAnchor&& from) noexcept
    : TrustAnchor() {
    *this = ::std::move(from);
  }

  inline TrustAnchor& operator=(const TrustAnchor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustAnchor& operator=(TrustAnchor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TrustAnchor& default_instance() {
    return *internal_default_instance();
  }
  enum CertificateCase {
    kDer = 1,
    kSha256Hex = 2,
    CERTIFICATE_NOT_SET = 0,
  };

  static inline const TrustAnchor* internal_default_instance() {
    return reinterpret_cast<const TrustAnchor*>(
               &_TrustAnchor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrustAnchor& a, TrustAnchor& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrustAnchor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustAnchor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustAnchor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustAnchor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrustAnchor& from);
  void MergeFrom(const TrustAnchor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustAnchor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_root_store.TrustAnchor";
  }
  protected:
  explicit TrustAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvPolicyOidsFieldNumber = 3,
    kConstraintsFieldNumber = 4,
    kDisplayNameFieldNumber = 5,
    kDerFieldNumber = 1,
    kSha256HexFieldNumber = 2,
  };
  // repeated string ev_policy_oids = 3;
  int ev_policy_oids_size() const;
  private:
  int _internal_ev_policy_oids_size() const;
  public:
  void clear_ev_policy_oids();
  const std::string& ev_policy_oids(int index) const;
  std::string* mutable_ev_policy_oids(int index);
  void set_ev_policy_oids(int index, const std::string& value);
  void set_ev_policy_oids(int index, std::string&& value);
  void set_ev_policy_oids(int index, const char* value);
  void set_ev_policy_oids(int index, const char* value, size_t size);
  std::string* add_ev_policy_oids();
  void add_ev_policy_oids(const std::string& value);
  void add_ev_policy_oids(std::string&& value);
  void add_ev_policy_oids(const char* value);
  void add_ev_policy_oids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ev_policy_oids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ev_policy_oids();
  private:
  const std::string& _internal_ev_policy_oids(int index) const;
  std::string* _internal_add_ev_policy_oids();
  public:

  // repeated .chrome_root_store.ConstraintSet constraints = 4;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::chrome_root_store::ConstraintSet* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::ConstraintSet >*
      mutable_constraints();
  private:
  const ::chrome_root_store::ConstraintSet& _internal_constraints(int index) const;
  ::chrome_root_store::ConstraintSet* _internal_add_constraints();
  public:
  const ::chrome_root_store::ConstraintSet& constraints(int index) const;
  ::chrome_root_store::ConstraintSet* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::ConstraintSet >&
      constraints() const;

  // optional string display_name = 5;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // bytes der = 1;
  bool has_der() const;
  private:
  bool _internal_has_der() const;
  public:
  void clear_der();
  const std::string& der() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_der(ArgT0&& arg0, ArgT... args);
  std::string* mutable_der();
  PROTOBUF_NODISCARD std::string* release_der();
  void set_allocated_der(std::string* der);
  private:
  const std::string& _internal_der() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_der(const std::string& value);
  std::string* _internal_mutable_der();
  public:

  // string sha256_hex = 2;
  bool has_sha256_hex() const;
  private:
  bool _internal_has_sha256_hex() const;
  public:
  void clear_sha256_hex();
  const std::string& sha256_hex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha256_hex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha256_hex();
  PROTOBUF_NODISCARD std::string* release_sha256_hex();
  void set_allocated_sha256_hex(std::string* sha256_hex);
  private:
  const std::string& _internal_sha256_hex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256_hex(const std::string& value);
  std::string* _internal_mutable_sha256_hex();
  public:

  void clear_certificate();
  CertificateCase certificate_case() const;
  // @@protoc_insertion_point(class_scope:chrome_root_store.TrustAnchor)
 private:
  class _Internal;
  void set_has_der();
  void set_has_sha256_hex();

  inline bool has_certificate() const;
  inline void clear_has_certificate();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ev_policy_oids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::ConstraintSet > constraints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    union CertificateUnion {
      constexpr CertificateUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr der_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256_hex_;
    } certificate_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_root_5fstore_2eproto;
};
// -------------------------------------------------------------------

class RootStore final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_root_store.RootStore) */ {
 public:
  inline RootStore() : RootStore(nullptr) {}
  ~RootStore() override;
  explicit PROTOBUF_CONSTEXPR RootStore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RootStore(const RootStore& from);
  RootStore(RootStore&& from) noexcept
    : RootStore() {
    *this = ::std::move(from);
  }

  inline RootStore& operator=(const RootStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootStore& operator=(RootStore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RootStore& default_instance() {
    return *internal_default_instance();
  }
  static inline const RootStore* internal_default_instance() {
    return reinterpret_cast<const RootStore*>(
               &_RootStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RootStore& a, RootStore& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RootStore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RootStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RootStore>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RootStore& from);
  void MergeFrom(const RootStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RootStore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_root_store.RootStore";
  }
  protected:
  explicit RootStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrustAnchorsFieldNumber = 1,
    kVersionMajorFieldNumber = 2,
  };
  // repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
  int trust_anchors_size() const;
  private:
  int _internal_trust_anchors_size() const;
  public:
  void clear_trust_anchors();
  ::chrome_root_store::TrustAnchor* mutable_trust_anchors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >*
      mutable_trust_anchors();
  private:
  const ::chrome_root_store::TrustAnchor& _internal_trust_anchors(int index) const;
  ::chrome_root_store::TrustAnchor* _internal_add_trust_anchors();
  public:
  const ::chrome_root_store::TrustAnchor& trust_anchors(int index) const;
  ::chrome_root_store::TrustAnchor* add_trust_anchors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >&
      trust_anchors() const;

  // int64 version_major = 2;
  void clear_version_major();
  int64_t version_major() const;
  void set_version_major(int64_t value);
  private:
  int64_t _internal_version_major() const;
  void _internal_set_version_major(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_root_store.RootStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor > trust_anchors_;
    int64_t version_major_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_root_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConstraintSet

// optional int64 sct_not_after_sec = 1;
inline bool ConstraintSet::_internal_has_sct_not_after_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConstraintSet::has_sct_not_after_sec() const {
  return _internal_has_sct_not_after_sec();
}
inline void ConstraintSet::clear_sct_not_after_sec() {
  _impl_.sct_not_after_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ConstraintSet::_internal_sct_not_after_sec() const {
  return _impl_.sct_not_after_sec_;
}
inline int64_t ConstraintSet::sct_not_after_sec() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.ConstraintSet.sct_not_after_sec)
  return _internal_sct_not_after_sec();
}
inline void ConstraintSet::_internal_set_sct_not_after_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sct_not_after_sec_ = value;
}
inline void ConstraintSet::set_sct_not_after_sec(int64_t value) {
  _internal_set_sct_not_after_sec(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.sct_not_after_sec)
}

// optional int64 sct_all_after_sec = 2;
inline bool ConstraintSet::_internal_has_sct_all_after_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConstraintSet::has_sct_all_after_sec() const {
  return _internal_has_sct_all_after_sec();
}
inline void ConstraintSet::clear_sct_all_after_sec() {
  _impl_.sct_all_after_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ConstraintSet::_internal_sct_all_after_sec() const {
  return _impl_.sct_all_after_sec_;
}
inline int64_t ConstraintSet::sct_all_after_sec() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.ConstraintSet.sct_all_after_sec)
  return _internal_sct_all_after_sec();
}
inline void ConstraintSet::_internal_set_sct_all_after_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sct_all_after_sec_ = value;
}
inline void ConstraintSet::set_sct_all_after_sec(int64_t value) {
  _internal_set_sct_all_after_sec(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.sct_all_after_sec)
}

// optional string min_version = 3;
inline bool ConstraintSet::_internal_has_min_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConstraintSet::has_min_version() const {
  return _internal_has_min_version();
}
inline void ConstraintSet::clear_min_version() {
  _impl_.min_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConstraintSet::min_version() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.ConstraintSet.min_version)
  return _internal_min_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConstraintSet::set_min_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.min_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.min_version)
}
inline std::string* ConstraintSet::mutable_min_version() {
  std::string* _s = _internal_mutable_min_version();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.ConstraintSet.min_version)
  return _s;
}
inline const std::string& ConstraintSet::_internal_min_version() const {
  return _impl_.min_version_.Get();
}
inline void ConstraintSet::_internal_set_min_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ConstraintSet::_internal_mutable_min_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.min_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ConstraintSet::release_min_version() {
  // @@protoc_insertion_point(field_release:chrome_root_store.ConstraintSet.min_version)
  if (!_internal_has_min_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.min_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.min_version_.IsDefault()) {
    _impl_.min_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConstraintSet::set_allocated_min_version(std::string* min_version) {
  if (min_version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.min_version_.SetAllocated(min_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.min_version_.IsDefault()) {
    _impl_.min_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.ConstraintSet.min_version)
}

// optional string max_version_exclusive = 4;
inline bool ConstraintSet::_internal_has_max_version_exclusive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConstraintSet::has_max_version_exclusive() const {
  return _internal_has_max_version_exclusive();
}
inline void ConstraintSet::clear_max_version_exclusive() {
  _impl_.max_version_exclusive_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConstraintSet::max_version_exclusive() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.ConstraintSet.max_version_exclusive)
  return _internal_max_version_exclusive();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConstraintSet::set_max_version_exclusive(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.max_version_exclusive_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.max_version_exclusive)
}
inline std::string* ConstraintSet::mutable_max_version_exclusive() {
  std::string* _s = _internal_mutable_max_version_exclusive();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.ConstraintSet.max_version_exclusive)
  return _s;
}
inline const std::string& ConstraintSet::_internal_max_version_exclusive() const {
  return _impl_.max_version_exclusive_.Get();
}
inline void ConstraintSet::_internal_set_max_version_exclusive(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_version_exclusive_.Set(value, GetArenaForAllocation());
}
inline std::string* ConstraintSet::_internal_mutable_max_version_exclusive() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.max_version_exclusive_.Mutable(GetArenaForAllocation());
}
inline std::string* ConstraintSet::release_max_version_exclusive() {
  // @@protoc_insertion_point(field_release:chrome_root_store.ConstraintSet.max_version_exclusive)
  if (!_internal_has_max_version_exclusive()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.max_version_exclusive_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.max_version_exclusive_.IsDefault()) {
    _impl_.max_version_exclusive_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConstraintSet::set_allocated_max_version_exclusive(std::string* max_version_exclusive) {
  if (max_version_exclusive != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.max_version_exclusive_.SetAllocated(max_version_exclusive, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.max_version_exclusive_.IsDefault()) {
    _impl_.max_version_exclusive_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.ConstraintSet.max_version_exclusive)
}

// repeated string permitted_dns_names = 5;
inline int ConstraintSet::_internal_permitted_dns_names_size() const {
  return _impl_.permitted_dns_names_.size();
}
inline int ConstraintSet::permitted_dns_names_size() const {
  return _internal_permitted_dns_names_size();
}
inline void ConstraintSet::clear_permitted_dns_names() {
  _impl_.permitted_dns_names_.Clear();
}
inline std::string* ConstraintSet::add_permitted_dns_names() {
  std::string* _s = _internal_add_permitted_dns_names();
  // @@protoc_insertion_point(field_add_mutable:chrome_root_store.ConstraintSet.permitted_dns_names)
  return _s;
}
inline const std::string& ConstraintSet::_internal_permitted_dns_names(int index) const {
  return _impl_.permitted_dns_names_.Get(index);
}
inline const std::string& ConstraintSet::permitted_dns_names(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.ConstraintSet.permitted_dns_names)
  return _internal_permitted_dns_names(index);
}
inline std::string* ConstraintSet::mutable_permitted_dns_names(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.ConstraintSet.permitted_dns_names)
  return _impl_.permitted_dns_names_.Mutable(index);
}
inline void ConstraintSet::set_permitted_dns_names(int index, const std::string& value) {
  _impl_.permitted_dns_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::set_permitted_dns_names(int index, std::string&& value) {
  _impl_.permitted_dns_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::set_permitted_dns_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permitted_dns_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::set_permitted_dns_names(int index, const char* value, size_t size) {
  _impl_.permitted_dns_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline std::string* ConstraintSet::_internal_add_permitted_dns_names() {
  return _impl_.permitted_dns_names_.Add();
}
inline void ConstraintSet::add_permitted_dns_names(const std::string& value) {
  _impl_.permitted_dns_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::add_permitted_dns_names(std::string&& value) {
  _impl_.permitted_dns_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::add_permitted_dns_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.permitted_dns_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline void ConstraintSet::add_permitted_dns_names(const char* value, size_t size) {
  _impl_.permitted_dns_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_root_store.ConstraintSet.permitted_dns_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConstraintSet::permitted_dns_names() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.ConstraintSet.permitted_dns_names)
  return _impl_.permitted_dns_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConstraintSet::mutable_permitted_dns_names() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.ConstraintSet.permitted_dns_names)
  return &_impl_.permitted_dns_names_;
}

// -------------------------------------------------------------------

// TrustAnchor

// bytes der = 1;
inline bool TrustAnchor::_internal_has_der() const {
  return certificate_case() == kDer;
}
inline bool TrustAnchor::has_der() const {
  return _internal_has_der();
}
inline void TrustAnchor::set_has_der() {
  _impl_._oneof_case_[0] = kDer;
}
inline void TrustAnchor::clear_der() {
  if (_internal_has_der()) {
    _impl_.certificate_.der_.Destroy();
    clear_has_certificate();
  }
}
inline const std::string& TrustAnchor::der() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.der)
  return _internal_der();
}
template <typename ArgT0, typename... ArgT>
inline void TrustAnchor::set_der(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    _impl_.certificate_.der_.InitDefault();
  }
  _impl_.certificate_.der_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.der)
}
inline std::string* TrustAnchor::mutable_der() {
  std::string* _s = _internal_mutable_der();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.der)
  return _s;
}
inline const std::string& TrustAnchor::_internal_der() const {
  if (_internal_has_der()) {
    return _impl_.certificate_.der_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrustAnchor::_internal_set_der(const std::string& value) {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    _impl_.certificate_.der_.InitDefault();
  }
  _impl_.certificate_.der_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustAnchor::_internal_mutable_der() {
  if (!_internal_has_der()) {
    clear_certificate();
    set_has_der();
    _impl_.certificate_.der_.InitDefault();
  }
  return _impl_.certificate_.der_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrustAnchor::release_der() {
  // @@protoc_insertion_point(field_release:chrome_root_store.TrustAnchor.der)
  if (_internal_has_der()) {
    clear_has_certificate();
    return _impl_.certificate_.der_.Release();
  } else {
    return nullptr;
  }
}
inline void TrustAnchor::set_allocated_der(std::string* der) {
  if (has_certificate()) {
    clear_certificate();
  }
  if (der != nullptr) {
    set_has_der();
    _impl_.certificate_.der_.InitAllocated(der, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.TrustAnchor.der)
}

// string sha256_hex = 2;
inline bool TrustAnchor::_internal_has_sha256_hex() const {
  return certificate_case() == kSha256Hex;
}
inline bool TrustAnchor::has_sha256_hex() const {
  return _internal_has_sha256_hex();
}
inline void TrustAnchor::set_has_sha256_hex() {
  _impl_._oneof_case_[0] = kSha256Hex;
}
inline void TrustAnchor::clear_sha256_hex() {
  if (_internal_has_sha256_hex()) {
    _impl_.certificate_.sha256_hex_.Destroy();
    clear_has_certificate();
  }
}
inline const std::string& TrustAnchor::sha256_hex() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.sha256_hex)
  return _internal_sha256_hex();
}
template <typename ArgT0, typename... ArgT>
inline void TrustAnchor::set_sha256_hex(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    _impl_.certificate_.sha256_hex_.InitDefault();
  }
  _impl_.certificate_.sha256_hex_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.sha256_hex)
}
inline std::string* TrustAnchor::mutable_sha256_hex() {
  std::string* _s = _internal_mutable_sha256_hex();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.sha256_hex)
  return _s;
}
inline const std::string& TrustAnchor::_internal_sha256_hex() const {
  if (_internal_has_sha256_hex()) {
    return _impl_.certificate_.sha256_hex_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrustAnchor::_internal_set_sha256_hex(const std::string& value) {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    _impl_.certificate_.sha256_hex_.InitDefault();
  }
  _impl_.certificate_.sha256_hex_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustAnchor::_internal_mutable_sha256_hex() {
  if (!_internal_has_sha256_hex()) {
    clear_certificate();
    set_has_sha256_hex();
    _impl_.certificate_.sha256_hex_.InitDefault();
  }
  return _impl_.certificate_.sha256_hex_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrustAnchor::release_sha256_hex() {
  // @@protoc_insertion_point(field_release:chrome_root_store.TrustAnchor.sha256_hex)
  if (_internal_has_sha256_hex()) {
    clear_has_certificate();
    return _impl_.certificate_.sha256_hex_.Release();
  } else {
    return nullptr;
  }
}
inline void TrustAnchor::set_allocated_sha256_hex(std::string* sha256_hex) {
  if (has_certificate()) {
    clear_certificate();
  }
  if (sha256_hex != nullptr) {
    set_has_sha256_hex();
    _impl_.certificate_.sha256_hex_.InitAllocated(sha256_hex, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.TrustAnchor.sha256_hex)
}

// repeated string ev_policy_oids = 3;
inline int TrustAnchor::_internal_ev_policy_oids_size() const {
  return _impl_.ev_policy_oids_.size();
}
inline int TrustAnchor::ev_policy_oids_size() const {
  return _internal_ev_policy_oids_size();
}
inline void TrustAnchor::clear_ev_policy_oids() {
  _impl_.ev_policy_oids_.Clear();
}
inline std::string* TrustAnchor::add_ev_policy_oids() {
  std::string* _s = _internal_add_ev_policy_oids();
  // @@protoc_insertion_point(field_add_mutable:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _s;
}
inline const std::string& TrustAnchor::_internal_ev_policy_oids(int index) const {
  return _impl_.ev_policy_oids_.Get(index);
}
inline const std::string& TrustAnchor::ev_policy_oids(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _internal_ev_policy_oids(index);
}
inline std::string* TrustAnchor::mutable_ev_policy_oids(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _impl_.ev_policy_oids_.Mutable(index);
}
inline void TrustAnchor::set_ev_policy_oids(int index, const std::string& value) {
  _impl_.ev_policy_oids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, std::string&& value) {
  _impl_.ev_policy_oids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ev_policy_oids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::set_ev_policy_oids(int index, const char* value, size_t size) {
  _impl_.ev_policy_oids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline std::string* TrustAnchor::_internal_add_ev_policy_oids() {
  return _impl_.ev_policy_oids_.Add();
}
inline void TrustAnchor::add_ev_policy_oids(const std::string& value) {
  _impl_.ev_policy_oids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(std::string&& value) {
  _impl_.ev_policy_oids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ev_policy_oids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline void TrustAnchor::add_ev_policy_oids(const char* value, size_t size) {
  _impl_.ev_policy_oids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_root_store.TrustAnchor.ev_policy_oids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrustAnchor::ev_policy_oids() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.TrustAnchor.ev_policy_oids)
  return _impl_.ev_policy_oids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrustAnchor::mutable_ev_policy_oids() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.TrustAnchor.ev_policy_oids)
  return &_impl_.ev_policy_oids_;
}

// repeated .chrome_root_store.ConstraintSet constraints = 4;
inline int TrustAnchor::_internal_constraints_size() const {
  return _impl_.constraints_.size();
}
inline int TrustAnchor::constraints_size() const {
  return _internal_constraints_size();
}
inline void TrustAnchor::clear_constraints() {
  _impl_.constraints_.Clear();
}
inline ::chrome_root_store::ConstraintSet* TrustAnchor::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.constraints)
  return _impl_.constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::ConstraintSet >*
TrustAnchor::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.TrustAnchor.constraints)
  return &_impl_.constraints_;
}
inline const ::chrome_root_store::ConstraintSet& TrustAnchor::_internal_constraints(int index) const {
  return _impl_.constraints_.Get(index);
}
inline const ::chrome_root_store::ConstraintSet& TrustAnchor::constraints(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.constraints)
  return _internal_constraints(index);
}
inline ::chrome_root_store::ConstraintSet* TrustAnchor::_internal_add_constraints() {
  return _impl_.constraints_.Add();
}
inline ::chrome_root_store::ConstraintSet* TrustAnchor::add_constraints() {
  ::chrome_root_store::ConstraintSet* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:chrome_root_store.TrustAnchor.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::ConstraintSet >&
TrustAnchor::constraints() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.TrustAnchor.constraints)
  return _impl_.constraints_;
}

// optional string display_name = 5;
inline bool TrustAnchor::_internal_has_display_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrustAnchor::has_display_name() const {
  return _internal_has_display_name();
}
inline void TrustAnchor::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustAnchor::display_name() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.TrustAnchor.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrustAnchor::set_display_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_root_store.TrustAnchor.display_name)
}
inline std::string* TrustAnchor::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:chrome_root_store.TrustAnchor.display_name)
  return _s;
}
inline const std::string& TrustAnchor::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void TrustAnchor::_internal_set_display_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustAnchor::_internal_mutable_display_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TrustAnchor::release_display_name() {
  // @@protoc_insertion_point(field_release:chrome_root_store.TrustAnchor.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrustAnchor::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_root_store.TrustAnchor.display_name)
}

inline bool TrustAnchor::has_certificate() const {
  return certificate_case() != CERTIFICATE_NOT_SET;
}
inline void TrustAnchor::clear_has_certificate() {
  _impl_._oneof_case_[0] = CERTIFICATE_NOT_SET;
}
inline TrustAnchor::CertificateCase TrustAnchor::certificate_case() const {
  return TrustAnchor::CertificateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RootStore

// repeated .chrome_root_store.TrustAnchor trust_anchors = 1;
inline int RootStore::_internal_trust_anchors_size() const {
  return _impl_.trust_anchors_.size();
}
inline int RootStore::trust_anchors_size() const {
  return _internal_trust_anchors_size();
}
inline void RootStore::clear_trust_anchors() {
  _impl_.trust_anchors_.Clear();
}
inline ::chrome_root_store::TrustAnchor* RootStore::mutable_trust_anchors(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_root_store.RootStore.trust_anchors)
  return _impl_.trust_anchors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >*
RootStore::mutable_trust_anchors() {
  // @@protoc_insertion_point(field_mutable_list:chrome_root_store.RootStore.trust_anchors)
  return &_impl_.trust_anchors_;
}
inline const ::chrome_root_store::TrustAnchor& RootStore::_internal_trust_anchors(int index) const {
  return _impl_.trust_anchors_.Get(index);
}
inline const ::chrome_root_store::TrustAnchor& RootStore::trust_anchors(int index) const {
  // @@protoc_insertion_point(field_get:chrome_root_store.RootStore.trust_anchors)
  return _internal_trust_anchors(index);
}
inline ::chrome_root_store::TrustAnchor* RootStore::_internal_add_trust_anchors() {
  return _impl_.trust_anchors_.Add();
}
inline ::chrome_root_store::TrustAnchor* RootStore::add_trust_anchors() {
  ::chrome_root_store::TrustAnchor* _add = _internal_add_trust_anchors();
  // @@protoc_insertion_point(field_add:chrome_root_store.RootStore.trust_anchors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_root_store::TrustAnchor >&
RootStore::trust_anchors() const {
  // @@protoc_insertion_point(field_list:chrome_root_store.RootStore.trust_anchors)
  return _impl_.trust_anchors_;
}

// int64 version_major = 2;
inline void RootStore::clear_version_major() {
  _impl_.version_major_ = int64_t{0};
}
inline int64_t RootStore::_internal_version_major() const {
  return _impl_.version_major_;
}
inline int64_t RootStore::version_major() const {
  // @@protoc_insertion_point(field_get:chrome_root_store.RootStore.version_major)
  return _internal_version_major();
}
inline void RootStore::_internal_set_version_major(int64_t value) {
  
  _impl_.version_major_ = value;
}
inline void RootStore::set_version_major(int64_t value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:chrome_root_store.RootStore.version_major)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_root_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_root_5fstore_2eproto
